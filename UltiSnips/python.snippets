priority -49

snippet nt "named tuple"
namedtuple('$1', ['$2'])
endsnippet

# Debugging {{{
snippet interactive "embed interactive python"
import code; code.interact(local=locals()) # XXX: BREAKPOINT
endsnippet

snippet ipython "ipython embed"
import IPython; IPython.embed() # XXX: BREAKPOINT
endsnippet

snippet pdb "pdb breakpoint"
import pdb; pdb.set_trace() # XXX: BREAKPOINT
endsnippet

snippet ipdb "ipdb breakpoint"
import ipdb; ipdb.set_trace() # XXX: BREAKPOINT
endsnippet

snippet rpdb "rpdb breakpoint"
import rpdb; rpdb.set_trace() # XXX: BREAKPOINT
endsnippet

snippet stacktrace "print stacktrace"
import traceback; traceback.print_stack() # XXX: STACKTRACE
endsnippet

snippet nose_pdb "nose pdb breakpoint"
from nose.tools import set_trace; set_trace() # XXX: BREAK
endsnippet
# }}}

# setuptools {{{
snippet setuptools "setuptools"
import os
from setuptools import setup, find_packages

# Utility function to read the README file.
# Used for the long_description.  It's nice, because now 1) we have a top level
# README file and 2) it's easier to type in the README file than to put a raw
# string in below ...
def read(fname):
    return open(os.path.join(os.path.dirname(__file__), fname)).read()

setup(
    name = "an_example_pypi_project",
    version = "0.0.4",
    author = "",
    author_email = "",
    description = ("An demonstration of how to create, document, and publish "
                                   "to the cheese shop a5 pypi.org."),
    long_description=read('README'),
    license = "BSD",
    keywords = "example documentation tutorial",
    url = "http://packages.python.org/an_example_pypi_project",
    packages=find_packages(),
    #packages=['an_example_pypi_project', 'tests'],
    classifiers=[
        "Development Status :: 3 - Alpha",
        "Topic :: Utilities",
        "License :: OSI Approved :: BSD License",
    ],
	entry_points={
		'console_scripts': [
			'foo = my_package.some_module:main_func',
			'bar = other_module:some_func',
		],
		'gui_scripts': [
			'baz = my_package_gui:start_func',
		]
	}
    install_requires=['six'],

    include_package_data=True,

    # Test setup
    test_suite='nose.collector',
    tests_require=['nose'],
)
endsnippet
# }}}

# vim:ft=snippets:foldmethod=marker
